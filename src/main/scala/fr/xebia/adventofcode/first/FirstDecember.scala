package fr.xebia.adventofcode.first

import scala.util.{Failure, Success, Try}


/**
  * http://adventofcode.com/2017/day/1
  */
case class FirstDecember(integerList: Array[Int]) {

  def computeFirstPart(): Int = {
    computeSumWithRoll(1)
  }

  def computeSecondPart(): Int = {
    val length: Int = integerList.length

    if(length % 2 == 1)
      throw new IllegalArgumentException(s"The input has $length digits, it must have an even number of digit")

    computeSumWithRoll(length / 2)
  }

  def computeSumWithRoll(splitIndex: Int): Int = {
    val (left, right) = integerList.splitAt(splitIndex)

    integerList
      .zip(right ++ left)
      .filter{ case (l, r) => l == r }
      .map(_._1)
      .sum
  }

}
object FirstDecember {

  def apply(s: String): FirstDecember = {
    Try(s.split("").map(_.toInt)) match {
      case Success(l) => FirstDecember(l)
      case Failure(_) => throw new IllegalArgumentException(s"The input $s is invalid, it should only be digits")
    }
  }

  def computeInput(): Unit = {
    val stringToCompute: String = "892195969991735837915273868729548694237967495115412399373194562526947585337233793" +
      "5682782652791998831971676347912931779861525662367183326175364872368797471679999833638322579124457568873148792" +
      "2992586447776135713985554852251379889985389661238714668771626459994328941632672725652517395386153424497946658" +
      "7895429399159924916364476319573895566795393368411672387263615582128377676293612892723762237191146714286233543" +
      "5144118133231979959538548716282253585435141578673722657187242769116995149714588448493497262763291351182431556" +
      "9827121884434738745734365644638179929689322225619848446587371431177793742116158179818955414147423623944761242" +
      "1883232173914183732126332838194648583472419154369952477422666389517569944428464617457124369349242479612422673" +
      "2413617775764669466229322437285512732848379344975111143344214862622449829147344521139463612453773518498155848" +
      "5569177889479821982246329838777192332933763439465443945856423325945145334531675324143826773943922549751527652" +
      "2424441532462541528195782818326918562247278496495764435386667383577543385186827269732261223156824351164841648" +
      "4245649251987836257213969889844815583918664839555339722121646938989554127191616484112791494134431928968642582" +
      "1549854382745843887135587933689272167593711195247918349698282516345628274767836461213559637353344771986738466" +
      "7516572262124225585623974278833981365494628646614588114147473559138853453189448624976774641922469183942857695" +
      "9863764289448768514979144438735138623194841817875935729874446697679395262944245312629995649485711423427411298" +
      "6231131131316679836344274579289622764288189313449815155232664793368959651685934224224458471481877379156718732" +
      "2217164347852843751875979415198165627534263527828414549217234322361937785185174993256753483876378332521824515" +
      "9771733975357842369236296367134691515263991495483228498314315262194786538617543641552758655116439232498585894" +
      "6614247476377841382682922666339846756955574726719512952513891756178543644985593395153897399588195452112475336" +
      "9223898312843734771532342383282987422334196585128526526324291777689689492346231786335851551413876834969878"

    val firstDecember = FirstDecember(stringToCompute)
    val firstResult: Int = firstDecember.computeFirstPart()
    val secondResult: Int = firstDecember.computeSecondPart()

    println(s"Result for the first part of the 1st December : $firstResult")
    println(s"Result for the second part of the 1st December : $secondResult")
  }

}

